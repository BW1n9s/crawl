抱歉，我误解了你的需求！如果你不需要 Python，而是希望直接用 **JavaScript** 在 Docker 容器中运行 Selenium 脚本，以下是基于 **Node.js** 和 **Selenium WebDriver** 的完整解决方案。

---

### 1. 安装 WSL 和 Docker

#### 1.1 安装 WSL
如果你还没有安装 WSL，可以按照以下步骤操作：
1. 打开 PowerShell（管理员权限）。
2. 运行以下命令启用 WSL：
   ```powershell
   wsl --install
   ```
3. 安装完成后，重启电脑。

#### 1.2 安装 Docker
1. 下载并安装 [Docker Desktop](https://www.docker.com/products/docker-desktop/)。
2. 安装完成后，打开 Docker Desktop，并确保启用 WSL 2 后端：
   - 打开 Docker Desktop 设置。
   - 进入 **General**，确保 **Use the WSL 2 based engine** 已勾选。
   - 进入 **Resources > WSL Integration**，启用你的 WSL 发行版（如 Ubuntu）。

---

### 2. 创建 Docker 容器

#### 2.1 创建项目目录
在 WSL 中创建一个目录来存放你的脚本和 Docker 相关文件：
```bash
mkdir ~/selenium-js-docker
cd ~/selenium-js-docker
```

#### 2.2 创建 `Dockerfile`
在项目目录中创建一个 `Dockerfile`，用于定义 Docker 容器的环境：
```bash
touch Dockerfile
```

编辑 `Dockerfile`，内容如下：
```dockerfile
# 使用官方 Node.js 镜像
FROM node:16

# 安装 Chrome 和 ChromeDriver
RUN apt-get update && apt-get install -y \
    wget \
    unzip \
    curl \
    gnupg \
    && rm -rf /var/lib/apt/lists/*

RUN wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | apt-key add - \
    && echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list \
    && apt-get update \
    && apt-get install -y google-chrome-stable \
    && CHROME_VERSION=$(google-chrome --version | awk '{print $3}') \
    && CHROME_DRIVER_VERSION=$(curl -s https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROME_VERSION}) \
    && wget -O /tmp/chromedriver.zip https://chromedriver.storage.googleapis.com/${CHROME_DRIVER_VERSION}/chromedriver_linux64.zip \
    && unzip /tmp/chromedriver.zip -d /usr/bin/ \
    && rm /tmp/chromedriver.zip \
    && chmod +x /usr/bin/chromedriver

# 设置工作目录
WORKDIR /app

# 复制 package.json 和 package-lock.json
COPY package*.json ./

# 安装 Node.js 依赖
RUN npm install

# 复制脚本到容器
COPY . .

# 设置默认命令
CMD ["node", "your_script.js"]
```

#### 2.3 创建 `package.json`
在项目目录中创建 `package.json` 文件，用于定义 Node.js 依赖：
```bash
touch package.json
```

编辑 `package.json`，内容如下：
```json
{
  "name": "selenium-js-docker",
  "version": "1.0.0",
  "description": "Run Selenium with JavaScript in Docker",
  "main": "your_script.js",
  "scripts": {
    "start": "node your_script.js"
  },
  "dependencies": {
    "selenium-webdriver": "^4.0.0"
  }
}
```

#### 2.4 创建 Selenium 脚本
在项目目录中创建你的 Selenium 脚本文件（如 `your_script.js`），内容如下：
```javascript
const { Builder, By, until } = require('selenium-webdriver');
const chrome = require('selenium-webdriver/chrome');

(async function () {
    // 设置 Chrome 选项
    let options = new chrome.Options();
    options.addArguments('--headless'); // 无头模式
    options.addArguments('--no-sandbox');
    options.addArguments('--disable-dev-shm-usage');

    // 初始化 WebDriver
    let driver = await new Builder()
        .forBrowser('chrome')
        .setChromeOptions(options)
        .build();

    try {
        // 打开目标网页
        await driver.get('https://example.com'); // 替换为目标网页的 URL

        // 使用 JavaScript 获取所有互动元素的 id 和 content
        let result = await driver.executeScript(`
            const interactiveElements = document.querySelectorAll('[id]');
            const result = [];
            interactiveElements.forEach(element => {
                const id = element.id;
                const content = element.textContent || element.value || element.placeholder || '';
                result.push({ id, content });
            });
            return result;
        `);

        // 打印结果
        result.forEach(item => {
            console.log(`ID: ${item.id}, Content: ${item.content}`);
        });
    } finally {
        // 关闭浏览器
        await driver.quit();
    }
})();
```

---

### 3. 构建和运行 Docker 容器

#### 3.1 构建 Docker 镜像
在项目目录中运行以下命令构建 Docker 镜像：
```bash
docker build -t selenium-js-docker .
```

#### 3.2 运行 Docker 容器
运行以下命令启动容器并执行脚本：
```bash
docker run --rm selenium-js-docker
```

---

### 4. 验证结果

如果一切正常，脚本会输出网页中所有互动元素的 `id` 和 `content`。例如：
```
ID: header, Content: Welcome to the page
ID: username, Content: Enter your username
ID: submit, Content: Submit
```

---

### 5. 其他注意事项

1. **调试容器**:
   - 如果需要调试容器，可以启动一个交互式 shell：
     ```bash
     docker run -it --rm selenium-js-docker /bin/bash
     ```

2. **挂载本地目录**:
   - 如果需要将脚本或数据挂载到容器中，可以使用 `-v` 参数：
     ```bash
     docker run -v $(pwd):/app --rm selenium-js-docker
     ```

3. **无头模式**:
   - 如果不需要 GUI，可以保持 `--headless` 参数；如果需要 GUI，可以去掉该参数并安装 X11 支持。

---

通过以上步骤，你可以在 WSL 上成功配置 Docker 容器来运行基于 JavaScript 的 Selenium 脚本。如果有其他问题，欢迎随时提问！
